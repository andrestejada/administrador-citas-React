{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","console","log","type","placeholder","onChange","protoType","PropTypes","func","isRequired","Cita","eliminarCita","onClick","App","citas","guardarCitas","nuevasCitas","filter","titulo","length","useEffect","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d46f9d3b.chunk.js","sourcesContent":["import React, { Fragment,useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    const [cita,actualizarCita]= useState({\r\n        mascota: '',\r\n        propietario:'',\r\n        fecha:'',\r\n        hora:'',\r\n        sintomas:''\r\n\r\n    });\r\n\r\n    const [error,actualizarError]= useState(false)\r\n\r\n    const actualizarState = (e)=>{\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    //Extraer los valores de la cita\r\n\r\n    const {mascota , propietario , fecha,hora,sintomas}= cita ;\r\n\r\n\r\n    const submitCita = (e)=>{\r\n\r\n        e.preventDefault();\r\n        //validar\r\n\r\n        if(mascota.trim()===''||propietario.trim()===''||fecha.trim()===''||hora.trim()===''||sintomas.trim()===''){\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n\r\n        actualizarError(false);\r\n\r\n        //asignar un ID\r\n        cita.id = uuidv4()\r\n        console.log(cita)\r\n        //Crear una cita\r\n        crearCita(cita)\r\n\r\n        //Reiniciar el Form\r\n\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario:'',\r\n            fecha:'',\r\n            hora:'',\r\n            sintomas:''\r\n    \r\n        })\r\n    }\r\n\r\n    return (\r\n\r\n        <Fragment>  \r\n        <h2> Crear cita</h2>\r\n\r\n        { error ? <p className=\"alerta-error\" > Todos los campos son obligatorios </p>  : null}\r\n\r\n        <form\r\n            onSubmit={submitCita}\r\n        >\r\n            <label>Nombre Mascota</label>\r\n            <input\r\n                type='text'\r\n                name='mascota'\r\n                className='u-full-width'\r\n                placeholder='Nombre Mascota'\r\n                onChange={actualizarState}\r\n                value={mascota}\r\n            />\r\n\r\n            <label>Nombre del Dueño de la Mascota</label>\r\n            <input\r\n                type='text'\r\n                name='propietario'\r\n                className='u-full-width'\r\n                placeholder='Nombre dueño de la mascota'\r\n                onChange={actualizarState}\r\n                value={propietario}\r\n            />\r\n\r\n            <label>Nombre Mascota</label>\r\n            <input\r\n                type='date'\r\n                name='fecha'\r\n                className='u-full-width'\r\n                onChange={actualizarState}\r\n                value={fecha}            \r\n            />\r\n\r\n            <label>Hora</label>\r\n            <input\r\n                type='time'\r\n                name='hora'\r\n                className='u-full-width'\r\n                onChange={actualizarState}\r\n                value={hora}      \r\n            />\r\n            <label>Sintomas</label>\r\n            <textarea\r\n            className='u-full-width'\r\n            name='sintomas'\r\n            onChange={actualizarState}\r\n            value={sintomas}     \r\n            ></textarea>\r\n\r\n            <button\r\n            type='submit'\r\n            className='u-full-width button-primary'\r\n            >Agregar Cita</button>\r\n\r\n        </form>\r\n        \r\n        </Fragment>\r\n     );\r\n}\r\n\r\nFormulario.protoType = {\r\n    crearCita : PropTypes.func.isRequired\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\n\r\nconst Cita = ({cita,eliminarCita}) => ( \r\n    \r\n    <div className='cita'>\r\n        <p>Mascota:<span>{cita.mascota}</span></p>\r\n        <p>Dueño:<span>{cita.propietario}</span></p>\r\n        <p>Fecha:<span>{cita.fecha}</span></p>\r\n        <p>Hora:<span>{cita.hora}</span></p>\r\n        <p>Sintomas:<span>{cita.sintomas}</span></p>\r\n        <button\r\n        className='button eliminar u-full-width'\r\n        onClick={()=>eliminarCita(cita.id)}\r\n        >Eliminar &times;</button>\r\n    </div>\r\n );\r\n\r\n \r\nexport default Cita;","import React ,{Fragment,useState, useEffect} from 'react'\nimport Formulario from './components/Formulario'\nimport Cita from './components/Cita'\n\n\nfunction App() {\n\n //arreglo con todas la citas\n  const [citas,guardarCitas] = useState([])\n\n  //funcion que tome las citas actuales y agregue la nueva\n\n  const crearCita = cita =>{\n    guardarCitas([...citas,cita])\n  }\n//funcion para eliminar cita por su ID\n\nconst eliminarCita = id =>{\n    const nuevasCitas= citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevasCitas)\n}\n\n\nconst titulo = citas.length ===0 ? 'No hay Ciatas':'Administra tus citas'\n\nuseEffect(()=>{\n  console.log(citas)\n},[citas])\n\n\n  return (\n \n\n   <Fragment>\n\n      <h1>Administracion de citas</h1>\n      <div className=\"container\" >\n        <div className=\"row\">\n            <div className=\"one-half column\" >\n              <Formulario\n\n                crearCita={crearCita}\n\n              />\n            </div>\n            <div className=\"one-half column\" >\n            <h2>{titulo}</h2>\n            {citas.map((cita)=>(\n              <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n\n              />\n            ))}\n\n            </div>\n        </div>\n      </div>\n   </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}